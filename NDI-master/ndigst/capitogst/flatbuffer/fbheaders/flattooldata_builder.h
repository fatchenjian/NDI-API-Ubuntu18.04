#ifndef FLATTOOLDATA_BUILDER_H
#define FLATTOOLDATA_BUILDER_H

/* Generated by flatcc 0.6.0-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATTOOLDATA_READER_H
#include "flattooldata_reader.h"
#endif
#ifndef FLATBUFFERS_COMMON_BUILDER_H
#include "flatbuffers_common_builder.h"
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

#define __NDI_FlatToolData_MarkerStatus_formal_args , NDI_FlatToolData_MarkerStatus_enum_t v0
#define __NDI_FlatToolData_MarkerStatus_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, NDI_FlatToolData_MarkerStatus, NDI_FlatToolData_MarkerStatus_enum_t)
#define __NDI_FlatToolData_ConditionType_formal_args , NDI_FlatToolData_ConditionType_enum_t v0
#define __NDI_FlatToolData_ConditionType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, NDI_FlatToolData_ConditionType, NDI_FlatToolData_ConditionType_enum_t)
#define __NDI_FlatToolData_FaultType_formal_args , NDI_FlatToolData_FaultType_enum_t v0
#define __NDI_FlatToolData_FaultType_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, NDI_FlatToolData_FaultType, NDI_FlatToolData_FaultType_enum_t)
#define __NDI_FlatToolData_TransformStatus_formal_args , NDI_FlatToolData_TransformStatus_enum_t v0
#define __NDI_FlatToolData_TransformStatus_call_args , v0
__flatbuffers_build_scalar(flatbuffers_, NDI_FlatToolData_TransformStatus, NDI_FlatToolData_TransformStatus_enum_t)

#define __NDI_FlatToolData_Marker_formal_args ,\
  NDI_FlatToolData_MarkerStatus_enum_t v0, uint16_t v1, double v2, double v3, double v4
#define __NDI_FlatToolData_Marker_call_args ,\
  v0, v1, v2, v3, v4
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_assign(NDI_FlatToolData_Marker_t *p,
  NDI_FlatToolData_MarkerStatus_enum_t v0, uint16_t v1, double v2, double v3, double v4)
{ p->status = v0; p->index = v1; p->x = v2; p->y = v3;
  p->z = v4;
  return p; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_copy(NDI_FlatToolData_Marker_t *p, const NDI_FlatToolData_Marker_t *p2)
{ p->status = p2->status; p->index = p2->index; p->x = p2->x; p->y = p2->y;
  p->z = p2->z;
  return p; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_assign_to_pe(NDI_FlatToolData_Marker_t *p,
  NDI_FlatToolData_MarkerStatus_enum_t v0, uint16_t v1, double v2, double v3, double v4)
{ p->status = v0; flatbuffers_uint16_assign_to_pe(&p->index, v1); flatbuffers_double_assign_to_pe(&p->x, v2); flatbuffers_double_assign_to_pe(&p->y, v3);
  flatbuffers_double_assign_to_pe(&p->z, v4);
  return p; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_copy_to_pe(NDI_FlatToolData_Marker_t *p, const NDI_FlatToolData_Marker_t *p2)
{ p->status = p2->status; flatbuffers_uint16_copy_to_pe(&p->index, &p2->index); flatbuffers_double_copy_to_pe(&p->x, &p2->x); flatbuffers_double_copy_to_pe(&p->y, &p2->y);
  flatbuffers_double_copy_to_pe(&p->z, &p2->z);
  return p; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_assign_from_pe(NDI_FlatToolData_Marker_t *p,
  NDI_FlatToolData_MarkerStatus_enum_t v0, uint16_t v1, double v2, double v3, double v4)
{ p->status = v0; flatbuffers_uint16_assign_from_pe(&p->index, v1); flatbuffers_double_assign_from_pe(&p->x, v2); flatbuffers_double_assign_from_pe(&p->y, v3);
  flatbuffers_double_assign_from_pe(&p->z, v4);
  return p; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_copy_from_pe(NDI_FlatToolData_Marker_t *p, const NDI_FlatToolData_Marker_t *p2)
{ p->status = p2->status; flatbuffers_uint16_copy_from_pe(&p->index, &p2->index); flatbuffers_double_copy_from_pe(&p->x, &p2->x); flatbuffers_double_copy_from_pe(&p->y, &p2->y);
  flatbuffers_double_copy_from_pe(&p->z, &p2->z);
  return p; }
__flatbuffers_build_struct(flatbuffers_, NDI_FlatToolData_Marker, 32, 8, NDI_FlatToolData_Marker_identifier, NDI_FlatToolData_Marker_type_identifier)

#define __NDI_FlatToolData_SystemAlert_formal_args , uint8_t v0, uint16_t v1
#define __NDI_FlatToolData_SystemAlert_call_args , v0, v1
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_assign(NDI_FlatToolData_SystemAlert_t *p, uint8_t v0, uint16_t v1)
{ p->conditionType = v0; p->conditionCode = v1;
  return p; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_copy(NDI_FlatToolData_SystemAlert_t *p, const NDI_FlatToolData_SystemAlert_t *p2)
{ p->conditionType = p2->conditionType; p->conditionCode = p2->conditionCode;
  return p; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_assign_to_pe(NDI_FlatToolData_SystemAlert_t *p, uint8_t v0, uint16_t v1)
{ p->conditionType = v0; flatbuffers_uint16_assign_to_pe(&p->conditionCode, v1);
  return p; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_copy_to_pe(NDI_FlatToolData_SystemAlert_t *p, const NDI_FlatToolData_SystemAlert_t *p2)
{ p->conditionType = p2->conditionType; flatbuffers_uint16_copy_to_pe(&p->conditionCode, &p2->conditionCode);
  return p; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_assign_from_pe(NDI_FlatToolData_SystemAlert_t *p, uint8_t v0, uint16_t v1)
{ p->conditionType = v0; flatbuffers_uint16_assign_from_pe(&p->conditionCode, v1);
  return p; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_copy_from_pe(NDI_FlatToolData_SystemAlert_t *p, const NDI_FlatToolData_SystemAlert_t *p2)
{ p->conditionType = p2->conditionType; flatbuffers_uint16_copy_from_pe(&p->conditionCode, &p2->conditionCode);
  return p; }
__flatbuffers_build_struct(flatbuffers_, NDI_FlatToolData_SystemAlert, 4, 2, NDI_FlatToolData_SystemAlert_identifier, NDI_FlatToolData_SystemAlert_type_identifier)

#define __NDI_FlatToolData_Transform_formal_args ,\
  uint16_t v0, uint16_t v1, double v2, double v3,\
  double v4, double v5, double v6, double v7, double v8, double v9
#define __NDI_FlatToolData_Transform_call_args ,\
  v0, v1, v2, v3,\
  v4, v5, v6, v7, v8, v9
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_assign(NDI_FlatToolData_Transform_t *p,
  uint16_t v0, uint16_t v1, double v2, double v3,
  double v4, double v5, double v6, double v7, double v8, double v9)
{ p->toolHandle = v0; p->status = v1; p->q0 = v2; p->qx = v3;
  p->qy = v4; p->qz = v5; p->tx = v6; p->ty = v7;
  p->tz = v8; p->error = v9;
  return p; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_copy(NDI_FlatToolData_Transform_t *p, const NDI_FlatToolData_Transform_t *p2)
{ p->toolHandle = p2->toolHandle; p->status = p2->status; p->q0 = p2->q0; p->qx = p2->qx;
  p->qy = p2->qy; p->qz = p2->qz; p->tx = p2->tx; p->ty = p2->ty;
  p->tz = p2->tz; p->error = p2->error;
  return p; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_assign_to_pe(NDI_FlatToolData_Transform_t *p,
  uint16_t v0, uint16_t v1, double v2, double v3,
  double v4, double v5, double v6, double v7, double v8, double v9)
{ flatbuffers_uint16_assign_to_pe(&p->toolHandle, v0); flatbuffers_uint16_assign_to_pe(&p->status, v1); flatbuffers_double_assign_to_pe(&p->q0, v2); flatbuffers_double_assign_to_pe(&p->qx, v3);
  flatbuffers_double_assign_to_pe(&p->qy, v4); flatbuffers_double_assign_to_pe(&p->qz, v5); flatbuffers_double_assign_to_pe(&p->tx, v6); flatbuffers_double_assign_to_pe(&p->ty, v7);
  flatbuffers_double_assign_to_pe(&p->tz, v8); flatbuffers_double_assign_to_pe(&p->error, v9);
  return p; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_copy_to_pe(NDI_FlatToolData_Transform_t *p, const NDI_FlatToolData_Transform_t *p2)
{ flatbuffers_uint16_copy_to_pe(&p->toolHandle, &p2->toolHandle); flatbuffers_uint16_copy_to_pe(&p->status, &p2->status); flatbuffers_double_copy_to_pe(&p->q0, &p2->q0); flatbuffers_double_copy_to_pe(&p->qx, &p2->qx);
  flatbuffers_double_copy_to_pe(&p->qy, &p2->qy); flatbuffers_double_copy_to_pe(&p->qz, &p2->qz); flatbuffers_double_copy_to_pe(&p->tx, &p2->tx); flatbuffers_double_copy_to_pe(&p->ty, &p2->ty);
  flatbuffers_double_copy_to_pe(&p->tz, &p2->tz); flatbuffers_double_copy_to_pe(&p->error, &p2->error);
  return p; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_assign_from_pe(NDI_FlatToolData_Transform_t *p,
  uint16_t v0, uint16_t v1, double v2, double v3,
  double v4, double v5, double v6, double v7, double v8, double v9)
{ flatbuffers_uint16_assign_from_pe(&p->toolHandle, v0); flatbuffers_uint16_assign_from_pe(&p->status, v1); flatbuffers_double_assign_from_pe(&p->q0, v2); flatbuffers_double_assign_from_pe(&p->qx, v3);
  flatbuffers_double_assign_from_pe(&p->qy, v4); flatbuffers_double_assign_from_pe(&p->qz, v5); flatbuffers_double_assign_from_pe(&p->tx, v6); flatbuffers_double_assign_from_pe(&p->ty, v7);
  flatbuffers_double_assign_from_pe(&p->tz, v8); flatbuffers_double_assign_from_pe(&p->error, v9);
  return p; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_copy_from_pe(NDI_FlatToolData_Transform_t *p, const NDI_FlatToolData_Transform_t *p2)
{ flatbuffers_uint16_copy_from_pe(&p->toolHandle, &p2->toolHandle); flatbuffers_uint16_copy_from_pe(&p->status, &p2->status); flatbuffers_double_copy_from_pe(&p->q0, &p2->q0); flatbuffers_double_copy_from_pe(&p->qx, &p2->qx);
  flatbuffers_double_copy_from_pe(&p->qy, &p2->qy); flatbuffers_double_copy_from_pe(&p->qz, &p2->qz); flatbuffers_double_copy_from_pe(&p->tx, &p2->tx); flatbuffers_double_copy_from_pe(&p->ty, &p2->ty);
  flatbuffers_double_copy_from_pe(&p->tz, &p2->tz); flatbuffers_double_copy_from_pe(&p->error, &p2->error);
  return p; }
__flatbuffers_build_struct(flatbuffers_, NDI_FlatToolData_Transform, 72, 8, NDI_FlatToolData_Transform_identifier, NDI_FlatToolData_Transform_type_identifier)

static const flatbuffers_voffset_t __NDI_FlatToolData_ToolData_required[] = { 0 };
typedef flatbuffers_ref_t NDI_FlatToolData_ToolData_ref_t;
static NDI_FlatToolData_ToolData_ref_t NDI_FlatToolData_ToolData_clone(flatbuffers_builder_t *B, NDI_FlatToolData_ToolData_table_t t);
__flatbuffers_build_table(flatbuffers_, NDI_FlatToolData_ToolData, 6)

static const flatbuffers_voffset_t __NDI_FlatToolData_ToolDataWrapper_required[] = { 0 };
typedef flatbuffers_ref_t NDI_FlatToolData_ToolDataWrapper_ref_t;
static NDI_FlatToolData_ToolDataWrapper_ref_t NDI_FlatToolData_ToolDataWrapper_clone(flatbuffers_builder_t *B, NDI_FlatToolData_ToolDataWrapper_table_t t);
__flatbuffers_build_table(flatbuffers_, NDI_FlatToolData_ToolDataWrapper, 1)

#define __NDI_FlatToolData_ToolData_formal_args ,\
  uint32_t v0, NDI_FlatToolData_Transform_t *v1, uint32_t v2, uint32_t v3, NDI_FlatToolData_Marker_vec_ref_t v4, NDI_FlatToolData_SystemAlert_vec_ref_t v5
#define __NDI_FlatToolData_ToolData_call_args ,\
  v0, v1, v2, v3, v4, v5
static inline NDI_FlatToolData_ToolData_ref_t NDI_FlatToolData_ToolData_create(flatbuffers_builder_t *B __NDI_FlatToolData_ToolData_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, NDI_FlatToolData_ToolData, NDI_FlatToolData_ToolData_identifier, NDI_FlatToolData_ToolData_type_identifier)

#define __NDI_FlatToolData_ToolDataWrapper_formal_args , NDI_FlatToolData_ToolData_vec_ref_t v0
#define __NDI_FlatToolData_ToolDataWrapper_call_args , v0
static inline NDI_FlatToolData_ToolDataWrapper_ref_t NDI_FlatToolData_ToolDataWrapper_create(flatbuffers_builder_t *B __NDI_FlatToolData_ToolDataWrapper_formal_args);
__flatbuffers_build_table_prolog(flatbuffers_, NDI_FlatToolData_ToolDataWrapper, NDI_FlatToolData_ToolDataWrapper_identifier, NDI_FlatToolData_ToolDataWrapper_type_identifier)

__flatbuffers_build_scalar_field(0, flatbuffers_, NDI_FlatToolData_ToolData_framenumber, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), NDI_FlatToolData_ToolData)
__flatbuffers_build_struct_field(1, flatbuffers_, NDI_FlatToolData_ToolData_transform, NDI_FlatToolData_Transform, 72, 8, NDI_FlatToolData_ToolData)
__flatbuffers_build_scalar_field(2, flatbuffers_, NDI_FlatToolData_ToolData_timespec_s, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), NDI_FlatToolData_ToolData)
__flatbuffers_build_scalar_field(3, flatbuffers_, NDI_FlatToolData_ToolData_timespec_ns, flatbuffers_uint32, uint32_t, 4, 4, UINT32_C(0), NDI_FlatToolData_ToolData)
__flatbuffers_build_vector_field(4, flatbuffers_, NDI_FlatToolData_ToolData_markers, NDI_FlatToolData_Marker, NDI_FlatToolData_Marker_t, NDI_FlatToolData_ToolData)
__flatbuffers_build_vector_field(5, flatbuffers_, NDI_FlatToolData_ToolData_alerts, NDI_FlatToolData_SystemAlert, NDI_FlatToolData_SystemAlert_t, NDI_FlatToolData_ToolData)

static inline NDI_FlatToolData_ToolData_ref_t NDI_FlatToolData_ToolData_create(flatbuffers_builder_t *B __NDI_FlatToolData_ToolData_formal_args)
{
    if (NDI_FlatToolData_ToolData_start(B)
        || NDI_FlatToolData_ToolData_transform_add(B, v1)
        || NDI_FlatToolData_ToolData_framenumber_add(B, v0)
        || NDI_FlatToolData_ToolData_timespec_s_add(B, v2)
        || NDI_FlatToolData_ToolData_timespec_ns_add(B, v3)
        || NDI_FlatToolData_ToolData_markers_add(B, v4)
        || NDI_FlatToolData_ToolData_alerts_add(B, v5)) {
        return 0;
    }
    return NDI_FlatToolData_ToolData_end(B);
}

static NDI_FlatToolData_ToolData_ref_t NDI_FlatToolData_ToolData_clone(flatbuffers_builder_t *B, NDI_FlatToolData_ToolData_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (NDI_FlatToolData_ToolData_start(B)
        || NDI_FlatToolData_ToolData_transform_pick(B, t)
        || NDI_FlatToolData_ToolData_framenumber_pick(B, t)
        || NDI_FlatToolData_ToolData_timespec_s_pick(B, t)
        || NDI_FlatToolData_ToolData_timespec_ns_pick(B, t)
        || NDI_FlatToolData_ToolData_markers_pick(B, t)
        || NDI_FlatToolData_ToolData_alerts_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, NDI_FlatToolData_ToolData_end(B));
}

__flatbuffers_build_table_vector_field(0, flatbuffers_, NDI_FlatToolData_ToolDataWrapper_tooldatas, NDI_FlatToolData_ToolData, NDI_FlatToolData_ToolDataWrapper)

static inline NDI_FlatToolData_ToolDataWrapper_ref_t NDI_FlatToolData_ToolDataWrapper_create(flatbuffers_builder_t *B __NDI_FlatToolData_ToolDataWrapper_formal_args)
{
    if (NDI_FlatToolData_ToolDataWrapper_start(B)
        || NDI_FlatToolData_ToolDataWrapper_tooldatas_add(B, v0)) {
        return 0;
    }
    return NDI_FlatToolData_ToolDataWrapper_end(B);
}

static NDI_FlatToolData_ToolDataWrapper_ref_t NDI_FlatToolData_ToolDataWrapper_clone(flatbuffers_builder_t *B, NDI_FlatToolData_ToolDataWrapper_table_t t)
{
    __flatbuffers_memoize_begin(B, t);
    if (NDI_FlatToolData_ToolDataWrapper_start(B)
        || NDI_FlatToolData_ToolDataWrapper_tooldatas_pick(B, t)) {
        return 0;
    }
    __flatbuffers_memoize_end(B, t, NDI_FlatToolData_ToolDataWrapper_end(B));
}

#include "flatcc/flatcc_epilogue.h"
#endif /* FLATTOOLDATA_BUILDER_H */
