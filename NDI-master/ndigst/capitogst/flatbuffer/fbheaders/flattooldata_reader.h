#ifndef FLATTOOLDATA_READER_H
#define FLATTOOLDATA_READER_H

/* Generated by flatcc 0.6.0-pre FlatBuffers schema compiler for C by dvide.com */

#ifndef FLATBUFFERS_COMMON_READER_H
#include "flatbuffers_common_reader.h"
#endif
#include "flatcc/flatcc_flatbuffers.h"
#ifndef __alignas_is_defined
#include <stdalign.h>
#endif
#include "flatcc/flatcc_prologue.h"
#ifndef flatbuffers_identifier
#define flatbuffers_identifier 0
#endif
#ifndef flatbuffers_extension
#define flatbuffers_extension ".bin"
#endif

typedef struct NDI_FlatToolData_Marker NDI_FlatToolData_Marker_t;
typedef const NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_struct_t;
typedef NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_mutable_struct_t;
typedef const NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_vec_t;
typedef NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker_mutable_vec_t;
typedef struct NDI_FlatToolData_SystemAlert NDI_FlatToolData_SystemAlert_t;
typedef const NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_struct_t;
typedef NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_mutable_struct_t;
typedef const NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_vec_t;
typedef NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert_mutable_vec_t;
typedef struct NDI_FlatToolData_Transform NDI_FlatToolData_Transform_t;
typedef const NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_struct_t;
typedef NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_mutable_struct_t;
typedef const NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_vec_t;
typedef NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform_mutable_vec_t;

typedef const struct NDI_FlatToolData_ToolData_table *NDI_FlatToolData_ToolData_table_t;
typedef struct NDI_FlatToolData_ToolData_table *NDI_FlatToolData_ToolData_mutable_table_t;
typedef const flatbuffers_uoffset_t *NDI_FlatToolData_ToolData_vec_t;
typedef flatbuffers_uoffset_t *NDI_FlatToolData_ToolData_mutable_vec_t;
typedef const struct NDI_FlatToolData_ToolDataWrapper_table *NDI_FlatToolData_ToolDataWrapper_table_t;
typedef struct NDI_FlatToolData_ToolDataWrapper_table *NDI_FlatToolData_ToolDataWrapper_mutable_table_t;
typedef const flatbuffers_uoffset_t *NDI_FlatToolData_ToolDataWrapper_vec_t;
typedef flatbuffers_uoffset_t *NDI_FlatToolData_ToolDataWrapper_mutable_vec_t;
#ifndef NDI_FlatToolData_Marker_identifier
#define NDI_FlatToolData_Marker_identifier flatbuffers_identifier
#endif
#define NDI_FlatToolData_Marker_type_hash ((flatbuffers_thash_t)0x1878e113)
#define NDI_FlatToolData_Marker_type_identifier "\x13\xe1\x78\x18"
#ifndef NDI_FlatToolData_SystemAlert_identifier
#define NDI_FlatToolData_SystemAlert_identifier flatbuffers_identifier
#endif
#define NDI_FlatToolData_SystemAlert_type_hash ((flatbuffers_thash_t)0xac2c246e)
#define NDI_FlatToolData_SystemAlert_type_identifier "\x6e\x24\x2c\xac"
#ifndef NDI_FlatToolData_Transform_identifier
#define NDI_FlatToolData_Transform_identifier flatbuffers_identifier
#endif
#define NDI_FlatToolData_Transform_type_hash ((flatbuffers_thash_t)0x9b5723d7)
#define NDI_FlatToolData_Transform_type_identifier "\xd7\x23\x57\x9b"
#ifndef NDI_FlatToolData_ToolData_identifier
#define NDI_FlatToolData_ToolData_identifier flatbuffers_identifier
#endif
#define NDI_FlatToolData_ToolData_type_hash ((flatbuffers_thash_t)0xb5197c9b)
#define NDI_FlatToolData_ToolData_type_identifier "\x9b\x7c\x19\xb5"
#ifndef NDI_FlatToolData_ToolDataWrapper_identifier
#define NDI_FlatToolData_ToolDataWrapper_identifier flatbuffers_identifier
#endif
#define NDI_FlatToolData_ToolDataWrapper_type_hash ((flatbuffers_thash_t)0x68ea3eba)
#define NDI_FlatToolData_ToolDataWrapper_type_identifier "\xba\x3e\xea\x68"

typedef uint8_t NDI_FlatToolData_MarkerStatus_enum_t;
__flatbuffers_define_integer_type(NDI_FlatToolData_MarkerStatus, NDI_FlatToolData_MarkerStatus_enum_t, 8)
#define NDI_FlatToolData_MarkerStatus_OK ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(0))
#define NDI_FlatToolData_MarkerStatus_Missing ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(1))
#define NDI_FlatToolData_MarkerStatus_OutOfVolume ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(5))
#define NDI_FlatToolData_MarkerStatus_PossiblePhantom ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(6))
#define NDI_FlatToolData_MarkerStatus_Saturated ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(7))
#define NDI_FlatToolData_MarkerStatus_SaturatedOutOfVolume ((NDI_FlatToolData_MarkerStatus_enum_t)UINT8_C(8))

static inline const char *NDI_FlatToolData_MarkerStatus_name(NDI_FlatToolData_MarkerStatus_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_MarkerStatus_OK: return "OK";
    case NDI_FlatToolData_MarkerStatus_Missing: return "Missing";
    case NDI_FlatToolData_MarkerStatus_OutOfVolume: return "OutOfVolume";
    case NDI_FlatToolData_MarkerStatus_PossiblePhantom: return "PossiblePhantom";
    case NDI_FlatToolData_MarkerStatus_Saturated: return "Saturated";
    case NDI_FlatToolData_MarkerStatus_SaturatedOutOfVolume: return "SaturatedOutOfVolume";
    default: return "";
    }
}

static inline int NDI_FlatToolData_MarkerStatus_is_known_value(NDI_FlatToolData_MarkerStatus_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_MarkerStatus_OK: return 1;
    case NDI_FlatToolData_MarkerStatus_Missing: return 1;
    case NDI_FlatToolData_MarkerStatus_OutOfVolume: return 1;
    case NDI_FlatToolData_MarkerStatus_PossiblePhantom: return 1;
    case NDI_FlatToolData_MarkerStatus_Saturated: return 1;
    case NDI_FlatToolData_MarkerStatus_SaturatedOutOfVolume: return 1;
    default: return 0;
    }
}

typedef int8_t NDI_FlatToolData_ConditionType_enum_t;
__flatbuffers_define_integer_type(NDI_FlatToolData_ConditionType, NDI_FlatToolData_ConditionType_enum_t, 8)
#define NDI_FlatToolData_ConditionType_Fault ((NDI_FlatToolData_ConditionType_enum_t)INT8_C(0))
#define NDI_FlatToolData_ConditionType_Alert ((NDI_FlatToolData_ConditionType_enum_t)INT8_C(1))
#define NDI_FlatToolData_ConditionType_Event ((NDI_FlatToolData_ConditionType_enum_t)INT8_C(2))

static inline const char *NDI_FlatToolData_ConditionType_name(NDI_FlatToolData_ConditionType_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_ConditionType_Fault: return "Fault";
    case NDI_FlatToolData_ConditionType_Alert: return "Alert";
    case NDI_FlatToolData_ConditionType_Event: return "Event";
    default: return "";
    }
}

static inline int NDI_FlatToolData_ConditionType_is_known_value(NDI_FlatToolData_ConditionType_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_ConditionType_Fault: return 1;
    case NDI_FlatToolData_ConditionType_Alert: return 1;
    case NDI_FlatToolData_ConditionType_Event: return 1;
    default: return 0;
    }
}

typedef uint16_t NDI_FlatToolData_FaultType_enum_t;
__flatbuffers_define_integer_type(NDI_FlatToolData_FaultType, NDI_FlatToolData_FaultType_enum_t, 16)
#define NDI_FlatToolData_FaultType_Ok ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(0))
#define NDI_FlatToolData_FaultType_FatalParameter ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(1))
#define NDI_FlatToolData_FaultType_SensorParameter ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(2))
#define NDI_FlatToolData_FaultType_MainVoltage ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(3))
#define NDI_FlatToolData_FaultType_SensorVoltage ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(4))
#define NDI_FlatToolData_FaultType_IlluminatorVoltage ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(5))
#define NDI_FlatToolData_FaultType_IlluminatorCurrent ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(6))
#define NDI_FlatToolData_FaultType_Sensor0Temp ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(7))
#define NDI_FlatToolData_FaultType_Sensor1Temp ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(8))
#define NDI_FlatToolData_FaultType_MainTemp ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(9))
#define NDI_FlatToolData_FaultType_SensorMalfunction ((NDI_FlatToolData_FaultType_enum_t)UINT16_C(10))

static inline const char *NDI_FlatToolData_FaultType_name(NDI_FlatToolData_FaultType_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_FaultType_Ok: return "Ok";
    case NDI_FlatToolData_FaultType_FatalParameter: return "FatalParameter";
    case NDI_FlatToolData_FaultType_SensorParameter: return "SensorParameter";
    case NDI_FlatToolData_FaultType_MainVoltage: return "MainVoltage";
    case NDI_FlatToolData_FaultType_SensorVoltage: return "SensorVoltage";
    case NDI_FlatToolData_FaultType_IlluminatorVoltage: return "IlluminatorVoltage";
    case NDI_FlatToolData_FaultType_IlluminatorCurrent: return "IlluminatorCurrent";
    case NDI_FlatToolData_FaultType_Sensor0Temp: return "Sensor0Temp";
    case NDI_FlatToolData_FaultType_Sensor1Temp: return "Sensor1Temp";
    case NDI_FlatToolData_FaultType_MainTemp: return "MainTemp";
    case NDI_FlatToolData_FaultType_SensorMalfunction: return "SensorMalfunction";
    default: return "";
    }
}

static inline int NDI_FlatToolData_FaultType_is_known_value(NDI_FlatToolData_FaultType_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_FaultType_Ok: return 1;
    case NDI_FlatToolData_FaultType_FatalParameter: return 1;
    case NDI_FlatToolData_FaultType_SensorParameter: return 1;
    case NDI_FlatToolData_FaultType_MainVoltage: return 1;
    case NDI_FlatToolData_FaultType_SensorVoltage: return 1;
    case NDI_FlatToolData_FaultType_IlluminatorVoltage: return 1;
    case NDI_FlatToolData_FaultType_IlluminatorCurrent: return 1;
    case NDI_FlatToolData_FaultType_Sensor0Temp: return 1;
    case NDI_FlatToolData_FaultType_Sensor1Temp: return 1;
    case NDI_FlatToolData_FaultType_MainTemp: return 1;
    case NDI_FlatToolData_FaultType_SensorMalfunction: return 1;
    default: return 0;
    }
}

typedef uint16_t NDI_FlatToolData_TransformStatus_enum_t;
__flatbuffers_define_integer_type(NDI_FlatToolData_TransformStatus, NDI_FlatToolData_TransformStatus_enum_t, 16)
#define NDI_FlatToolData_TransformStatus_Enabled ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(0))
#define NDI_FlatToolData_TransformStatus_PartiallyOutOfVolume ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(3))
#define NDI_FlatToolData_TransformStatus_OutOfVolume ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(9))
#define NDI_FlatToolData_TransformStatus_TooFewMarkers ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(13))
#define NDI_FlatToolData_TransformStatus_Inteference ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(14))
#define NDI_FlatToolData_TransformStatus_BadTransformFit ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(17))
#define NDI_FlatToolData_TransformStatus_DataBufferLimit ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(18))
#define NDI_FlatToolData_TransformStatus_AlgorithmLimit ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(19))
#define NDI_FlatToolData_TransformStatus_FellBehind ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(20))
#define NDI_FlatToolData_TransformStatus_OutOfSynch ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(21))
#define NDI_FlatToolData_TransformStatus_ProcessingError ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(22))
#define NDI_FlatToolData_TransformStatus_ToolMissing ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(31))
#define NDI_FlatToolData_TransformStatus_TrackingNotEnabled ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(32))
#define NDI_FlatToolData_TransformStatus_ToolUnplugged ((NDI_FlatToolData_TransformStatus_enum_t)UINT16_C(33))

static inline const char *NDI_FlatToolData_TransformStatus_name(NDI_FlatToolData_TransformStatus_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_TransformStatus_Enabled: return "Enabled";
    case NDI_FlatToolData_TransformStatus_PartiallyOutOfVolume: return "PartiallyOutOfVolume";
    case NDI_FlatToolData_TransformStatus_OutOfVolume: return "OutOfVolume";
    case NDI_FlatToolData_TransformStatus_TooFewMarkers: return "TooFewMarkers";
    case NDI_FlatToolData_TransformStatus_Inteference: return "Inteference";
    case NDI_FlatToolData_TransformStatus_BadTransformFit: return "BadTransformFit";
    case NDI_FlatToolData_TransformStatus_DataBufferLimit: return "DataBufferLimit";
    case NDI_FlatToolData_TransformStatus_AlgorithmLimit: return "AlgorithmLimit";
    case NDI_FlatToolData_TransformStatus_FellBehind: return "FellBehind";
    case NDI_FlatToolData_TransformStatus_OutOfSynch: return "OutOfSynch";
    case NDI_FlatToolData_TransformStatus_ProcessingError: return "ProcessingError";
    case NDI_FlatToolData_TransformStatus_ToolMissing: return "ToolMissing";
    case NDI_FlatToolData_TransformStatus_TrackingNotEnabled: return "TrackingNotEnabled";
    case NDI_FlatToolData_TransformStatus_ToolUnplugged: return "ToolUnplugged";
    default: return "";
    }
}

static inline int NDI_FlatToolData_TransformStatus_is_known_value(NDI_FlatToolData_TransformStatus_enum_t value)
{
    switch (value) {
    case NDI_FlatToolData_TransformStatus_Enabled: return 1;
    case NDI_FlatToolData_TransformStatus_PartiallyOutOfVolume: return 1;
    case NDI_FlatToolData_TransformStatus_OutOfVolume: return 1;
    case NDI_FlatToolData_TransformStatus_TooFewMarkers: return 1;
    case NDI_FlatToolData_TransformStatus_Inteference: return 1;
    case NDI_FlatToolData_TransformStatus_BadTransformFit: return 1;
    case NDI_FlatToolData_TransformStatus_DataBufferLimit: return 1;
    case NDI_FlatToolData_TransformStatus_AlgorithmLimit: return 1;
    case NDI_FlatToolData_TransformStatus_FellBehind: return 1;
    case NDI_FlatToolData_TransformStatus_OutOfSynch: return 1;
    case NDI_FlatToolData_TransformStatus_ProcessingError: return 1;
    case NDI_FlatToolData_TransformStatus_ToolMissing: return 1;
    case NDI_FlatToolData_TransformStatus_TrackingNotEnabled: return 1;
    case NDI_FlatToolData_TransformStatus_ToolUnplugged: return 1;
    default: return 0;
    }
}


struct NDI_FlatToolData_Marker {
    alignas(8) NDI_FlatToolData_MarkerStatus_enum_t status;
    alignas(2) uint16_t index;
    alignas(8) double x;
    alignas(8) double y;
    alignas(8) double z;
};
static_assert(sizeof(NDI_FlatToolData_Marker_t) == 32, "struct size mismatch");

static inline const NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker__const_ptr_add(const NDI_FlatToolData_Marker_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_Marker_t *NDI_FlatToolData_Marker__ptr_add(NDI_FlatToolData_Marker_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_Marker_struct_t NDI_FlatToolData_Marker_vec_at(NDI_FlatToolData_Marker_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t NDI_FlatToolData_Marker__size() { return 32; }
static inline size_t NDI_FlatToolData_Marker_vec_len(NDI_FlatToolData_Marker_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(NDI_FlatToolData_Marker)

__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Marker, status, NDI_FlatToolData_MarkerStatus, NDI_FlatToolData_MarkerStatus_enum_t)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Marker, index, flatbuffers_uint16, uint16_t)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Marker, x, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Marker, y, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Marker, z, flatbuffers_double, double)

struct NDI_FlatToolData_SystemAlert {
    alignas(2) uint8_t conditionType;
    alignas(2) uint16_t conditionCode;
};
static_assert(sizeof(NDI_FlatToolData_SystemAlert_t) == 4, "struct size mismatch");

static inline const NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert__const_ptr_add(const NDI_FlatToolData_SystemAlert_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_SystemAlert_t *NDI_FlatToolData_SystemAlert__ptr_add(NDI_FlatToolData_SystemAlert_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_SystemAlert_struct_t NDI_FlatToolData_SystemAlert_vec_at(NDI_FlatToolData_SystemAlert_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t NDI_FlatToolData_SystemAlert__size() { return 4; }
static inline size_t NDI_FlatToolData_SystemAlert_vec_len(NDI_FlatToolData_SystemAlert_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(NDI_FlatToolData_SystemAlert)

__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_SystemAlert, conditionType, flatbuffers_uint8, uint8_t)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_SystemAlert, conditionCode, flatbuffers_uint16, uint16_t)

struct NDI_FlatToolData_Transform {
    alignas(8) uint16_t toolHandle;
    alignas(2) uint16_t status;
    alignas(8) double q0;
    alignas(8) double qx;
    alignas(8) double qy;
    alignas(8) double qz;
    alignas(8) double tx;
    alignas(8) double ty;
    alignas(8) double tz;
    alignas(8) double error;
};
static_assert(sizeof(NDI_FlatToolData_Transform_t) == 72, "struct size mismatch");

static inline const NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform__const_ptr_add(const NDI_FlatToolData_Transform_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_Transform_t *NDI_FlatToolData_Transform__ptr_add(NDI_FlatToolData_Transform_t *p, size_t i) { return p + i; }
static inline NDI_FlatToolData_Transform_struct_t NDI_FlatToolData_Transform_vec_at(NDI_FlatToolData_Transform_vec_t vec, size_t i)
__flatbuffers_struct_vec_at(vec, i)
static inline size_t NDI_FlatToolData_Transform__size() { return 72; }
static inline size_t NDI_FlatToolData_Transform_vec_len(NDI_FlatToolData_Transform_vec_t vec)
__flatbuffers_vec_len(vec)
__flatbuffers_struct_as_root(NDI_FlatToolData_Transform)

__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, toolHandle, flatbuffers_uint16, uint16_t)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, status, flatbuffers_uint16, uint16_t)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, q0, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, qx, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, qy, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, qz, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, tx, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, ty, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, tz, flatbuffers_double, double)
__flatbuffers_define_struct_scalar_field(NDI_FlatToolData_Transform, error, flatbuffers_double, double)


struct NDI_FlatToolData_ToolData_table { uint8_t unused__; };

static inline size_t NDI_FlatToolData_ToolData_vec_len(NDI_FlatToolData_ToolData_vec_t vec)
__flatbuffers_vec_len(vec)
static inline NDI_FlatToolData_ToolData_table_t NDI_FlatToolData_ToolData_vec_at(NDI_FlatToolData_ToolData_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(NDI_FlatToolData_ToolData_table_t, vec, i, 0)
__flatbuffers_table_as_root(NDI_FlatToolData_ToolData)

__flatbuffers_define_scalar_field(0, NDI_FlatToolData_ToolData, framenumber, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_struct_field(1, NDI_FlatToolData_ToolData, transform, NDI_FlatToolData_Transform_struct_t, 0)
/**  The "seconds" part of the timestamp */
__flatbuffers_define_scalar_field(2, NDI_FlatToolData_ToolData, timespec_s, flatbuffers_uint32, uint32_t, UINT32_C(0))
/**  The "nanoseconds" part of the timestamp */
__flatbuffers_define_scalar_field(3, NDI_FlatToolData_ToolData, timespec_ns, flatbuffers_uint32, uint32_t, UINT32_C(0))
__flatbuffers_define_vector_field(4, NDI_FlatToolData_ToolData, markers, NDI_FlatToolData_Marker_vec_t, 0)
__flatbuffers_define_vector_field(5, NDI_FlatToolData_ToolData, alerts, NDI_FlatToolData_SystemAlert_vec_t, 0)

struct NDI_FlatToolData_ToolDataWrapper_table { uint8_t unused__; };

static inline size_t NDI_FlatToolData_ToolDataWrapper_vec_len(NDI_FlatToolData_ToolDataWrapper_vec_t vec)
__flatbuffers_vec_len(vec)
static inline NDI_FlatToolData_ToolDataWrapper_table_t NDI_FlatToolData_ToolDataWrapper_vec_at(NDI_FlatToolData_ToolDataWrapper_vec_t vec, size_t i)
__flatbuffers_offset_vec_at(NDI_FlatToolData_ToolDataWrapper_table_t, vec, i, 0)
__flatbuffers_table_as_root(NDI_FlatToolData_ToolDataWrapper)

__flatbuffers_define_vector_field(0, NDI_FlatToolData_ToolDataWrapper, tooldatas, NDI_FlatToolData_ToolData_vec_t, 0)


#include "flatcc/flatcc_epilogue.h"
#endif /* FLATTOOLDATA_READER_H */
